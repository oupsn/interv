basePath: /api
definitions:
  AdminCreateBody:
    properties:
      name:
        type: string
      password:
        type: string
      portalId:
        type: integer
      role:
        type: string
      username:
        type: string
    required:
    - name
    - password
    - portalId
    - role
    - username
    type: object
  CodingInterviewAddQuestionQuery:
    properties:
      codingQuestionID:
        type: integer
      target:
        type: string
      targetID:
        type: integer
    required:
    - codingQuestionID
    - target
    - targetID
    type: object
  CodingInterviewCreateQuestionQuery:
    properties:
      body:
        $ref: '#/definitions/domains.CreateCodingQuestionRequest'
    required:
    - body
    type: object
  CodingInterviewGetCompileResultQuery:
    properties:
      body:
        $ref: '#/definitions/domains.CompilationRequest'
    required:
    - body
    type: object
  CodingInterviewUpdateQuestionQuery:
    properties:
      body:
        $ref: '#/definitions/domains.CreateCodingQuestionRequest'
      codingQuestionID:
        type: integer
    required:
    - body
    - codingQuestionID
    type: object
  CreatePortalBody:
    properties:
      company_name:
        type: string
    required:
    - company_name
    type: object
  CreateRoomBody:
    properties:
      candidateId:
        type: integer
      workspaceId:
        type: integer
    required:
    - candidateId
    - workspaceId
    type: object
  CreateRoomResponse:
    properties:
      candidateId:
        type: integer
      roomId:
        type: string
    required:
    - candidateId
    - roomId
    type: object
  CreateVideoQuestionBody:
    properties:
      portalId:
        type: integer
      timeToAnswer:
        type: integer
      timeToPrepare:
        type: integer
      title:
        type: string
      totalAttempt:
        type: integer
    required:
    - portalId
    - timeToAnswer
    - timeToPrepare
    - title
    - totalAttempt
    type: object
  CreateVideoQuestionResponse:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      portalId:
        type: integer
      timeToAnswer:
        type: integer
      timeToPrepare:
        type: integer
      title:
        type: string
      totalAttempt:
        type: integer
      updatedAt:
        type: string
    type: object
  CreateWorkspaceBody:
    properties:
      codingTime:
        type: integer
      endDate:
        type: string
      isCoding:
        type: boolean
      isVideo:
        type: boolean
      portalId:
        type: integer
      reqCamera:
        type: boolean
      reqMicrophone:
        type: boolean
      reqScreen:
        type: boolean
      startDate:
        type: string
      title:
        type: string
    required:
    - codingTime
    - endDate
    - isCoding
    - isVideo
    - portalId
    - reqCamera
    - reqMicrophone
    - reqScreen
    - startDate
    - title
    type: object
  CurrentUserResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      portalId:
        type: integer
      role:
        type: string
      updated_at:
        type: string
      username:
        type: string
    required:
    - created_at
    - id
    - name
    - portalId
    - role
    - updated_at
    - username
    type: object
  DeletePortalBody:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  DeleteUserFromWorkspaceBody:
    properties:
      userId:
        type: integer
      workspaceId:
        type: integer
    required:
    - userId
    - workspaceId
    type: object
  DeleteVideoQuestionByIdBody:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  DeleteWorkspaceBody:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  GetObjectBody:
    properties:
      bucketName:
        type: string
      objectName:
        type: string
    required:
    - bucketName
    - objectName
    type: object
  GetRoomContextResponse:
    properties:
      candidateId:
        type: integer
      candidateName:
        type: string
      dueDate:
        type: string
      isCodingDone:
        type: boolean
      isOverdue:
        type: boolean
      isVideoDone:
        type: boolean
      roomId:
        type: string
      totalCodingQuestion:
        type: integer
      totalCodingTime:
        type: integer
      totalVideoQuestion:
        type: integer
      totalVideoTime:
        type: integer
    required:
    - candidateId
    - candidateName
    - dueDate
    - isCodingDone
    - isOverdue
    - isVideoDone
    - roomId
    - totalCodingQuestion
    - totalCodingTime
    - totalVideoQuestion
    - totalVideoTime
    type: object
  GetVideoQuestionByIdResponse:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      portalId:
        type: integer
      timeToAnswer:
        type: integer
      timeToPrepare:
        type: integer
      title:
        type: string
      totalAttempt:
        type: integer
      updatedAt:
        type: string
    type: object
  GetVideoQuestionByPortalIdResponse:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      portalId:
        type: integer
      timeToAnswer:
        type: integer
      timeToPrepare:
        type: integer
      title:
        type: string
      totalAttempt:
        type: integer
      updatedAt:
        type: string
    type: object
  IndividualUser:
    properties:
      id:
        type: integer
      userData:
        $ref: '#/definitions/User'
      userInWorkspace:
        $ref: '#/definitions/UserInWorkspace'
    required:
    - id
    - userData
    - userInWorkspace
    type: object
  LoginBody:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  MailObject:
    properties:
      dueDate:
        type: string
      name:
        type: string
      roomId:
        type: string
      to:
        type: string
    required:
    - name
    - roomId
    - to
    type: object
  PortalData:
    properties:
      companyName:
        type: string
      id:
        type: integer
    type: object
  SendMailBody:
    properties:
      mailList:
        items:
          $ref: '#/definitions/MailObject'
        type: array
      preset:
        $ref: '#/definitions/handlers.MailPreset'
    required:
    - mailList
    - preset
    type: object
  UpdateRoomContextBody:
    properties:
      candidateId:
        type: integer
      isCodingDone:
        type: boolean
      isVideoDone:
        type: boolean
      roomId:
        type: string
    required:
    - roomId
    type: object
  UpdateVideoQuestionBody:
    properties:
      portalId:
        type: integer
      questionId:
        type: integer
      timeToAnswer:
        type: integer
      timeToPrepare:
        type: integer
      title:
        type: string
      totalAttempt:
        type: integer
    required:
    - questionId
    type: object
  User:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      role:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  UserCreateBody:
    properties:
      listUser:
        items:
          $ref: '#/definitions/domains.User'
        type: array
      workspaceId:
        type: integer
    required:
    - listUser
    - workspaceId
    type: object
  UserDeleteBody:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  UserInWorkspace:
    properties:
      id:
        type: integer
      isInterest:
        type: boolean
      status:
        type: string
      userId:
        type: integer
      workspaceId:
        type: integer
    required:
    - id
    - isInterest
    - status
    - userId
    - workspaceId
    type: object
  VideoInterviewContextResponse:
    properties:
      questionSetting:
        items:
          $ref: '#/definitions/VideoInterviewQuestionSetting'
        type: array
      totalQuestions:
        type: integer
    required:
    - questionSetting
    - totalQuestions
    type: object
  VideoInterviewQuestionResponse:
    properties:
      question:
        type: string
      questionId:
        type: integer
    required:
    - question
    - questionId
    type: object
  VideoInterviewQuestionSetting:
    properties:
      isLast:
        type: boolean
      questionId:
        type: integer
      questionIndex:
        type: integer
      timeToAnswer:
        type: integer
      timeToPrepare:
        type: integer
      totalAttempt:
        type: integer
    required:
    - isLast
    - questionId
    - questionIndex
    - timeToAnswer
    - timeToPrepare
    - totalAttempt
    type: object
  WorkspaceData:
    properties:
      individualUser:
        items:
          $ref: '#/definitions/IndividualUser'
        type: array
      workspaceDetail:
        $ref: '#/definitions/WorkspaceDetail'
    required:
    - individualUser
    - workspaceDetail
    type: object
  WorkspaceDetail:
    properties:
      codingTime:
        type: integer
      endDate:
        type: string
      id:
        type: integer
      isCoding:
        type: boolean
      isVideo:
        type: boolean
      memberNum:
        type: integer
      portalId:
        type: integer
      reqCamera:
        type: boolean
      reqMicrophone:
        type: boolean
      reqScreen:
        type: boolean
      startDate:
        type: string
      title:
        type: string
    type: object
  domains.CodingQuestion:
    properties:
      coding_question_in_portal:
        items:
          $ref: '#/definitions/domains.CodingQuestionInPortal'
        type: array
      coding_question_in_workspace:
        items:
          $ref: '#/definitions/domains.CodingQuestionInWorkspace'
        type: array
      created_at:
        type: string
      created_by:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      difficulty:
        type: string
      id:
        type: integer
      input_description:
        type: string
      output_description:
        type: string
      test_cases:
        items:
          $ref: '#/definitions/domains.CodingQuestionTestCase'
        type: array
      title:
        type: string
      updated_at:
        type: string
      updated_by:
        type: string
      updatedAt:
        type: string
    type: object
  domains.CodingQuestionInPortal:
    properties:
      codingQuestion:
        $ref: '#/definitions/domains.CodingQuestion'
      codingQuestionID:
        type: integer
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      portal:
        $ref: '#/definitions/domains.Portal'
      portalID:
        type: integer
      updatedAt:
        type: string
    type: object
  domains.CodingQuestionInWorkspace:
    properties:
      codingQuestion:
        $ref: '#/definitions/domains.CodingQuestion'
      codingQuestionID:
        type: integer
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      updatedAt:
        type: string
      workspace:
        $ref: '#/definitions/domains.Workspace'
      workspaceID:
        type: integer
    type: object
  domains.CodingQuestionResponse:
    properties:
      description:
        type: string
      difficulty:
        type: string
      id:
        type: integer
      input_description:
        type: string
      output_description:
        type: string
      test_case:
        items:
          $ref: '#/definitions/domains.CodingQuestionTestCaseResponse'
        type: array
      title:
        type: string
    type: object
  domains.CodingQuestionSnapshot:
    properties:
      code:
        type: string
      coding_question_id:
        type: integer
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      is_submitted:
        type: boolean
      language:
        type: string
      linter_result:
        type: string
      memory_usage:
        type: string
      room_id:
        type: string
      run_time:
        type: string
      test_cases_result:
        type: integer
      time_taken:
        type: integer
      updatedAt:
        type: string
    type: object
  domains.CodingQuestionTestCase:
    properties:
      codingQuestionID:
        type: integer
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      input:
        type: string
      isExample:
        type: boolean
      isHidden:
        type: boolean
      output:
        type: string
      updatedAt:
        type: string
    type: object
  domains.CodingQuestionTestCaseResponse:
    properties:
      input:
        type: string
      is_example:
        type: boolean
      is_hidden:
        type: boolean
      output:
        type: string
    type: object
  domains.CompilationCompileResult:
    properties:
      compile_output:
        type: string
      memory:
        type: integer
      message:
        type: string
      status:
        properties:
          description:
            type: string
          id:
            type: integer
        type: object
      stderr:
        type: string
      stdout:
        type: string
      time:
        type: string
    type: object
  domains.CompilationRequest:
    properties:
      language:
        type: integer
      question_id:
        type: integer
      source_code:
        type: string
    type: object
  domains.CompilationResultResponse:
    properties:
      compile_result:
        $ref: '#/definitions/domains.CompilationCompileResult'
      is_passed:
        type: boolean
      test_case_id:
        type: integer
    type: object
  domains.CreateCodingQuestionRequest:
    properties:
      description:
        type: string
      difficulty:
        type: string
      input_description:
        type: string
      output_description:
        type: string
      test_cases:
        items:
          $ref: '#/definitions/domains.CodingQuestionTestCase'
        type: array
      title:
        type: string
    type: object
  domains.Portal:
    properties:
      companyName:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      updatedAt:
        type: string
    type: object
  domains.User:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      role:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
  domains.VideoQuestion:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      portalID:
        type: integer
      timeToAnswer:
        type: integer
      timeToPrepare:
        type: integer
      title:
        type: string
      totalAttempt:
        type: integer
      updatedAt:
        type: string
      workspace:
        items:
          $ref: '#/definitions/domains.Workspace'
        type: array
    type: object
  domains.Workspace:
    properties:
      codingTime:
        type: integer
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      endDate:
        type: string
      id:
        type: integer
      isCoding:
        type: boolean
      isVideo:
        type: boolean
      portalId:
        type: integer
      reqCamera:
        type: boolean
      reqMicrophone:
        type: boolean
      reqScreen:
        type: boolean
      startDate:
        type: string
      title:
        type: string
      updatedAt:
        type: string
      videoQuestion:
        items:
          $ref: '#/definitions/domains.VideoQuestion'
        type: array
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  handlers.CodingInterviewGetQuestionByTitleResponse:
    properties:
      description:
        type: string
      difficulty:
        type: string
      id:
        type: integer
      input_description:
        type: string
      output_description:
        type: string
      test_case:
        items:
          $ref: '#/definitions/domains.CodingQuestionTestCaseResponse'
        type: array
      title:
        type: string
    type: object
  handlers.ErrResponse:
    properties:
      code:
        type: integer
      message:
        type: string
      timestamp:
        type: string
    type: object
  handlers.MailPreset:
    enum:
    - invite
    - finish
    type: string
    x-enum-varnames:
    - Invite
    - Finish
  handlers.OkResponse:
    properties:
      code:
        type: integer
      message:
        type: string
      timestamp:
        type: string
    type: object
  handlers.Response-CreateRoomResponse:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/CreateRoomResponse'
      message:
        type: string
      timestamp:
        type: string
    type: object
  handlers.Response-CreateVideoQuestionResponse:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/CreateVideoQuestionResponse'
      message:
        type: string
      timestamp:
        type: string
    type: object
  handlers.Response-CurrentUserResponse:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/CurrentUserResponse'
      message:
        type: string
      timestamp:
        type: string
    type: object
  handlers.Response-GetRoomContextResponse:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/GetRoomContextResponse'
      message:
        type: string
      timestamp:
        type: string
    type: object
  handlers.Response-GetVideoQuestionByIdResponse:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/GetVideoQuestionByIdResponse'
      message:
        type: string
      timestamp:
        type: string
    type: object
  handlers.Response-PortalData:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/PortalData'
      message:
        type: string
      timestamp:
        type: string
    type: object
  handlers.Response-User:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/User'
      message:
        type: string
      timestamp:
        type: string
    type: object
  handlers.Response-UserInWorkspace:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/UserInWorkspace'
      message:
        type: string
      timestamp:
        type: string
    type: object
  handlers.Response-VideoInterviewContextResponse:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/VideoInterviewContextResponse'
      message:
        type: string
      timestamp:
        type: string
    type: object
  handlers.Response-VideoInterviewQuestionResponse:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/VideoInterviewQuestionResponse'
      message:
        type: string
      timestamp:
        type: string
    type: object
  handlers.Response-WorkspaceData:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/WorkspaceData'
      message:
        type: string
      timestamp:
        type: string
    type: object
  handlers.Response-WorkspaceDetail:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/WorkspaceDetail'
      message:
        type: string
      timestamp:
        type: string
    type: object
  handlers.Response-array_GetVideoQuestionByPortalIdResponse:
    properties:
      code:
        type: integer
      data:
        items:
          $ref: '#/definitions/GetVideoQuestionByPortalIdResponse'
        type: array
      message:
        type: string
      timestamp:
        type: string
    type: object
  handlers.Response-array_UserInWorkspace:
    properties:
      code:
        type: integer
      data:
        items:
          $ref: '#/definitions/UserInWorkspace'
        type: array
      message:
        type: string
      timestamp:
        type: string
    type: object
  handlers.Response-array_WorkspaceDetail:
    properties:
      code:
        type: integer
      data:
        items:
          $ref: '#/definitions/WorkspaceDetail'
        type: array
      message:
        type: string
      timestamp:
        type: string
    type: object
  handlers.Response-domains_CodingQuestion:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/domains.CodingQuestion'
      message:
        type: string
      timestamp:
        type: string
    type: object
  handlers.Response-handlers_CodingInterviewGetCompileResultResponse:
    properties:
      code:
        type: integer
      data:
        items:
          $ref: '#/definitions/domains.CompilationResultResponse'
        type: array
      message:
        type: string
      timestamp:
        type: string
    type: object
  handlers.Response-handlers_CodingInterviewGetQuestionByTitleResponse:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/handlers.CodingInterviewGetQuestionByTitleResponse'
      message:
        type: string
      timestamp:
        type: string
    type: object
  handlers.Response-handlers_CodingInterviewGetQuestionsInPortalResponse:
    properties:
      code:
        type: integer
      data:
        items:
          $ref: '#/definitions/domains.CodingQuestion'
        type: array
      message:
        type: string
      timestamp:
        type: string
    type: object
  handlers.Response-handlers_CodingInterviewGetQuestionsResponse:
    properties:
      code:
        type: integer
      data:
        items:
          $ref: '#/definitions/domains.CodingQuestionResponse'
        type: array
      message:
        type: string
      timestamp:
        type: string
    type: object
  handlers.Response-string:
    properties:
      code:
        type: integer
      data:
        type: string
      message:
        type: string
      timestamp:
        type: string
    type: object
info:
  contact: {}
  title: Interv API
  version: "1.0"
paths:
  /auth.login:
    post:
      consumes:
      - application/json
      operationId: login
      parameters:
      - description: LoginBody
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/LoginBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response-string'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
      summary: Login to the system
      tags:
      - authentication
  /auth.logout:
    post:
      consumes:
      - application/json
      operationId: logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.OkResponse'
      summary: Logout from the system
      tags:
      - authentication
  /auth.me:
    get:
      consumes:
      - application/json
      operationId: me
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response-CurrentUserResponse'
      summary: Get current user in the system
      tags:
      - authentication
  /codingInterview.addQuestion:
    post:
      consumes:
      - application/json
      description: Add a coding interview question to a target
      operationId: AddQuestion
      parameters:
      - description: Request body containing the coding question ID, target, and target
          ID
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/CodingInterviewAddQuestionQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with a message
          schema:
            $ref: '#/definitions/handlers.Response-string'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
      summary: Add a coding interview question to a target
      tags:
      - codingInterview
  /codingInterview.createQuestion:
    post:
      consumes:
      - application/json
      description: Create a new coding interview question
      operationId: CreateQuestion
      parameters:
      - description: Request body containing the new question details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/CodingInterviewCreateQuestionQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with the created question
          schema:
            $ref: '#/definitions/handlers.Response-domains_CodingQuestion'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
      summary: Create a new coding interview question
      tags:
      - codingInterview
  /codingInterview.createQuestionSnapshot:
    post:
      consumes:
      - application/json
      description: Create a new coding interview question snapshot
      operationId: CreateQuestionSnapshot
      parameters:
      - description: Request body containing the coding question snapshots
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/domains.CodingQuestionSnapshot'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with a message
          schema:
            $ref: '#/definitions/handlers.Response-string'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
      summary: Create a new coding interview question snapshot
      tags:
      - codingInterview
  /codingInterview.deleteQuestion/{codingQuestionID}:
    delete:
      consumes:
      - application/json
      description: Delete a coding interview question
      operationId: DeleteQuestion
      parameters:
      - description: Coding Question ID
        in: path
        name: codingQuestionID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with a message
          schema:
            $ref: '#/definitions/handlers.Response-string'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
      summary: Delete a coding interview question
      tags:
      - codingInterview
  /codingInterview.getCompileResult:
    post:
      consumes:
      - application/json
      description: Get compile result for a coding interview
      operationId: GetCompileResult
      parameters:
      - description: Request body containing the token to get the compile result
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/CodingInterviewGetCompileResultQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with the compile result
          schema:
            $ref: '#/definitions/handlers.Response-handlers_CodingInterviewGetCompileResultResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
      summary: Get compile result for a coding interview
      tags:
      - codingInterview
  /codingInterview.getQuestionByTitle/{title}:
    get:
      consumes:
      - application/json
      description: Get coding interview question by title
      operationId: GetQuestionByTitle
      parameters:
      - description: Question Title
        in: path
        name: title
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with the coding interview question by title
          schema:
            $ref: '#/definitions/handlers.Response-handlers_CodingInterviewGetQuestionByTitleResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
      summary: Get coding interview question by title
      tags:
      - codingInterview
  /codingInterview.getQuestions:
    get:
      consumes:
      - application/json
      description: Get coding interview questions
      operationId: GetQuestions
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with the coding interview questions
          schema:
            $ref: '#/definitions/handlers.Response-handlers_CodingInterviewGetQuestionsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
      summary: Get coding interview questions
      tags:
      - codingInterview
  /codingInterview.getQuestionsInPortal/{portalId}:
    get:
      consumes:
      - application/json
      description: Get coding interview questions in a portal
      operationId: GetQuestionsInPortal
      parameters:
      - description: Portal ID
        in: path
        name: portalId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with the coding interview questions in
            a portal
          schema:
            $ref: '#/definitions/handlers.Response-handlers_CodingInterviewGetQuestionsInPortalResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
      summary: Get coding interview questions in a portal
      tags:
      - codingInterview
  /codingInterview.updateQuestion/{codingQuestionID}:
    put:
      consumes:
      - application/json
      description: Update a coding interview question
      operationId: UpdateQuestion
      parameters:
      - description: Coding Question ID
        in: path
        name: codingQuestionID
        required: true
        type: integer
      - description: Request body containing the updated question details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/CodingInterviewUpdateQuestionQuery'
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with the updated question
          schema:
            $ref: '#/definitions/handlers.Response-domains_CodingQuestion'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
      summary: Update a coding interview question
      tags:
      - codingInterview
  /mail.sendMail:
    post:
      consumes:
      - application/json
      operationId: sendMail
      parameters:
      - description: Mail details
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/SendMailBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response-string'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
      summary: Send mail to the user
      tags:
      - mail
  /object.getObject:
    post:
      operationId: getObject
      parameters:
      - description: Get Object Body
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/GetObjectBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response-string'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
      summary: Get object from the system
      tags:
      - object
  /object.uploadObject:
    post:
      consumes:
      - multipart/form-data
      operationId: uploadObject
      parameters:
      - description: Video Interview File
        in: formData
        name: file
        required: true
        type: file
      - description: Bucket Name
        in: formData
        name: bucketName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response-string'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
      summary: Upload object to the system
      tags:
      - object
  /portal.create:
    post:
      consumes:
      - application/json
      operationId: CreatePortal
      parameters:
      - description: CreatePortalBody
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/CreatePortalBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response-PortalData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
      summary: Create new portal
      tags:
      - portal
  /portal.delete:
    post:
      consumes:
      - application/json
      operationId: DeletePortalById
      parameters:
      - description: DeletePortalBody
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/DeletePortalBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response-string'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
      summary: Delete portal By Id
      tags:
      - portal
  /portal.get:
    get:
      consumes:
      - application/json
      operationId: GetPortalById
      parameters:
      - in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response-PortalData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
      summary: Get portal
      tags:
      - portal
  /room.checkAuthCandidate:
    get:
      consumes:
      - application/json
      operationId: checkAuthCandidate
      parameters:
      - description: room id
        in: query
        name: roomId
        required: true
        type: string
      - description: room token
        in: query
        name: rt
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response-string'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
      summary: Check authentication for candidate
      tags:
      - room
  /room.createRoom:
    post:
      consumes:
      - application/json
      operationId: createRoom
      parameters:
      - description: create room
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/CreateRoomBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response-CreateRoomResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
      summary: Create room
      tags:
      - room
  /room.getRoomContext:
    get:
      consumes:
      - application/json
      operationId: getRoomContext
      parameters:
      - in: query
        name: roomId
        required: true
        type: string
      - in: query
        name: rt
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response-GetRoomContextResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
      summary: Get room context
      tags:
      - room
  /room.updateRoomContext:
    post:
      consumes:
      - application/json
      operationId: updateRoomContext
      parameters:
      - description: update room context
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UpdateRoomContextBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response-string'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
      summary: Update room context
      tags:
      - room
  /user.createAdmin:
    post:
      consumes:
      - application/json
      operationId: createAdmin
      parameters:
      - description: CreateAdminBody
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/AdminCreateBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response-User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
      summary: Create new admin
      tags:
      - user
  /user.createUser:
    post:
      consumes:
      - application/json
      operationId: createUser
      parameters:
      - description: CreateUserBody
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UserCreateBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response-User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
      summary: Create new user
      tags:
      - user
  /user.deleteUser:
    post:
      consumes:
      - application/json
      operationId: deleteUser
      parameters:
      - description: DeleteUserBody
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UserDeleteBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response-string'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
      summary: Delete user
      tags:
      - user
  /userInWorkspace.delete:
    delete:
      consumes:
      - application/json
      operationId: DeleteUserFromWorkspace
      parameters:
      - description: DeleteUserFromWorkspaceBody
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/DeleteUserFromWorkspaceBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response-UserInWorkspace'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
      summary: Delete User From Workspace
      tags:
      - userInWorkspace
  /userInWorkspace.get:
    get:
      consumes:
      - application/json
      operationId: GetUserInWorkspace
      parameters:
      - in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response-array_UserInWorkspace'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
      summary: Get user In Workspace
      tags:
      - userInWorkspace
  /videoInterview.getVideoInterviewContext:
    get:
      consumes:
      - application/json
      operationId: getVideoInterviewContext
      parameters:
      - in: query
        name: roomId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response-VideoInterviewContextResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
      summary: Get video interview context
      tags:
      - videoInterview
  /videoInterview.getVideoInterviewQuestion:
    get:
      consumes:
      - application/json
      operationId: getVideoInterviewQuestion
      parameters:
      - in: query
        name: questionId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response-VideoInterviewQuestionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
      summary: Get video interview question
      tags:
      - videoInterview
  /videoInterview.submitVideoInterview:
    post:
      consumes:
      - multipart/form-data
      operationId: submitVideoInterview
      parameters:
      - description: Video Interview File
        in: formData
        name: file
        required: true
        type: file
      - description: Room ID
        in: formData
        name: roomId
        required: true
        type: string
      - description: Candidate ID
        in: formData
        name: candidateId
        required: true
        type: integer
      - description: Video Question ID
        in: formData
        name: videoQuestionId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response-string'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
      summary: Submit video interview
      tags:
      - videoInterview
  /videoQuestion.createVideoQuestion:
    post:
      consumes:
      - application/json
      operationId: createVideoQuestion
      parameters:
      - description: CreateVideoQuestionBody
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/CreateVideoQuestionBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response-CreateVideoQuestionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
      summary: Create new video question
      tags:
      - videoQuestion
  /videoQuestion.deleteVideoQuestionById:
    post:
      consumes:
      - application/json
      operationId: deleteVideoQuestionById
      parameters:
      - description: Video question ID
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/DeleteVideoQuestionByIdBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response-string'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
      summary: Delete video question by id
      tags:
      - videoQuestion
  /videoQuestion.getVideoQuestionById:
    get:
      consumes:
      - application/json
      operationId: getVideoQuestionById
      parameters:
      - in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response-GetVideoQuestionByIdResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
      summary: Get video question by id
      tags:
      - videoQuestion
  /videoQuestion.getVideoQuestionByPortalId:
    get:
      consumes:
      - application/json
      operationId: getVideoQuestionByPortalId
      parameters:
      - in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response-array_GetVideoQuestionByPortalIdResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
      summary: Get video question by portal id
      tags:
      - videoQuestion
  /videoQuestion.updateVideoQuestion:
    post:
      consumes:
      - application/json
      operationId: updateVideoQuestion
      parameters:
      - description: UpdateVideoQuestionBody
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UpdateVideoQuestionBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response-CreateVideoQuestionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
      summary: Update video question
      tags:
      - videoQuestion
  /workspace.create:
    post:
      consumes:
      - application/json
      operationId: CreateWorkspace
      parameters:
      - description: CreateWorkspaceBody
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/CreateWorkspaceBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response-WorkspaceDetail'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
      summary: Create new workspace
      tags:
      - workspace
  /workspace.delete:
    post:
      consumes:
      - application/json
      operationId: DeleteWorkspaceById
      parameters:
      - description: DeleteWorkspaceBody
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/DeleteWorkspaceBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response-string'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
      summary: Delete workspace By Id
      tags:
      - workspace
  /workspace.get:
    get:
      consumes:
      - application/json
      operationId: GetWorkspace
      parameters:
      - in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response-WorkspaceData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
      summary: Get workspace
      tags:
      - workspace
  /workspace.getByPortal:
    get:
      consumes:
      - application/json
      operationId: GetPortalWorkspace
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Response-array_WorkspaceDetail'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrResponse'
      summary: Get List of workspace
      tags:
      - workspace
swagger: "2.0"
